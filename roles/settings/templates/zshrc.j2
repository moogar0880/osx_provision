#!/usr/local/bin/bash
###
### {{ ansible_managed }}
###

###
### System Settings
###
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export CC=cc
export CFLAGS
CFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
# This instructs zsh to only source ~/.zshrc, not all rc files installed by the
# distribution.
setopt noglobalrcs

# Set the preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='atom'
else
  export EDITOR='atom'
fi

alias apro="ansible-playbook --ask-sudo-pass -i inventory local.yml --connection=local --ask-vault-pass"

export DEFAULT_PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin"
export PATH="${DEFAULT_PATH}:/usr/local/opt/go/libexec/bin:/usr/local/Cellar/pkg-config/0.28/bin"
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/Library/ENV/pkgconfig/10.9:/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.4/lib/pkgconfig:/usr/local/opt/python/Frameworks/Python.framework/Versions/2.7/lib/pkgconfig

# Echo the octal permissions for the specified file
alias octal="stat -f %Mp%Lp"

###############################################################################
# Re-source $ZSHRC, maintaining the current python $VIRTUAL_ENV variable, if
# one is set.
#
# Args
#   None
###############################################################################
rezsh()
{
	if [ -n "${VIRTUAL_ENV}" ]; then
		# shellcheck disable=SC1090
		source "${ZSHRC}"
    	# shellcheck disable=SC1090
		source "${VIRTUAL_ENV}/bin/activate"
	else
		# shellcheck disable=SC1090
		source "${ZSHRC}"
	fi
}

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
export ZSH_THEME="jnappi"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# shellcheck disable=SC2034
plugins=(git osx homebrew)

# shellcheck disable=SC1090
source "${ZSH}/oh-my-zsh.sh"

# Enable the accessing of online ZSH help documentation
unalias run-help &>/dev/null
autoload run-help
export HELPDIR=/usr/local/share/zsh/help

###
### ZSH Autosuggestions Configurations
###
# Color to use when highlighting suggestion
# Uses format of `region_highlight`
# More info: http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets
source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=yellow'

###
### Golang configuration
###
export GOPATH="${HOME}/.go-packages"
export PATH="${PATH}:${GOPATH}/bin"

###
### Virtualenv Settings
###
export VENV_PATH="${HOME}/.virtualenvs"

# Setting $VIRTUAL_ENV_DISABLE_PROMPT disables the default virtualenv prompt
# from appearing to the left of your shell prompt.
export VIRTUAL_ENV_DISABLE_PROMPT=true

###############################################################################
# List all available virtualenvs located under $VENV_PATH
#
# Globals:
#   VENV_PATH
# Args
#   1) -l (optional) - Long list of available virtualenv names
#	2) -lv (optional) - Long list of available virtualenv names and the
#		version of python installed under that virtualenv
###############################################################################
venvs()
{
	# Set default values for LIST and LIST_VERSION commandline flags
	LIST=false
	LIST_VERSION=false

	# Parse provided commandline flags. If we received an accepted flag, set
	# it's associated variable accordingly.
	for i in "$@"
	do
	case $i in
	    -l)
	    LIST=true
	    shift # past argument with no value
	    ;;
	    -lv)
	    LIST_VERSION=true
	    shift # past argument with no value
	    ;;
	    *)
	          # unknown option
	    ;;
	esac
	done

	if [ ${LIST} = true ]; then
		command ls -l "${VENV_PATH}"  | grep "${USER}" | awk '{print $NF}'
	elif [ ${LIST_VERSION} = true ]; then
		venvs -l | while read -r venv; do echo "$venv - $(print_py_version "$venv")"; done
	else
		ls "${VENV_PATH}"
	fi
}

###############################################################################
# Echo the version of python installed to a specific virtualenv. Virtualenvs
# with Python 2.x interpreters would print their version strings on a newline
# when calling $(python --version), making output from the venvs function less
# pretty. Hence, this (sort-of-hacky) utility function.
#
# Globals:
#   VENV_PATH
# Args
#   1) The name of a virtualenv whose python version you would like to print
###############################################################################
print_py_version()
{
	local venv_name=$1
	"${VENV_PATH}/$venv_name/bin/python" -c "import sys; print(sys.version.split()[0])"
}

###############################################################################
# Activate the named virtualenv for the current shell session
#
# Args
#   1) Name of the virtualenv to activate
###############################################################################
activate()
{
    # shellcheck disable=SC1090
    source "${VENV_PATH}/$1/bin/activate"
}

###
### ZSH Configuration
###
export ZSHRC="${HOME}/.zshrc"
alias zedit="${EDITOR} ${ZSHRC}"
alias ohmyzsh="${EDITOR} $HOME/.oh-my-zsh"

###
### Docker Configuration
###
export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.99.100:2376"
export DOCKER_CERT_PATH="/Users/Jon/.docker/machine/machines/dev"
export DOCKER_MACHINE_NAME="dev"

###
### Homebrew Aliases
###
alias bup="brew update && brew cask update && brew upgrade --all && brew cleanup"

###
### Git Aliases
###
alias gs="git status"
alias gc="git commit"
alias gcm="git commit -m"
alias pull="git pull"
alias push="git push"

###############################################################################
# Fetch the specified Pull Request for the current repository into the
# specified local branch. Then checkout the newly fetched pull request.
#
# Args
#   1) The ID of the pull request to pull down
#	2) The Name of the branch to check the PR out as locally
###############################################################################
gpr()
{
	local pr_id=$1
	local branch_name=$2

	git fetch --all
	git fetch origin "pull/$pr_id/head:$branch_name"
	git checkout "$branch_name"
}

###
### Lastpass
###
###############################################################################
# Fetch the specified password from the lastpass cli, strip off the trailing
# newline character, and copy it to the clipboard.
#
# Args
#   1) The {UNIQUENAME|UNIQUEID} of the vault item to copy
###############################################################################
lpasscp()
{
	lpass show --password "$1" | xargs echo -n | pbcopy
}
